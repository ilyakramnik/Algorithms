        -:    0:Source:C:/Users/User/Contests_2nd grade/Contest10/sum_of_array_numbers/main.cpp
        -:    0:Graph:C:\Users\User\Contests_2nd grade\Contest10\sum_of_array_numbers\cmake-build-debug-coverage\CMakeFiles\sum_of_array_numbers.dir\main.cpp.gcno
        -:    0:Data:C:\Users\User\Contests_2nd grade\Contest10\sum_of_array_numbers\cmake-build-debug-coverage\CMakeFiles\sum_of_array_numbers.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <iostream>
        -:    2:
function main called 1 returned 100% blocks executed 89%
        1:    3:int main() {
        1:    4:    std::ios::sync_with_stdio(false);
        1:    4-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:    5:    std::cin.tie(nullptr);
        1:    5-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:    6:    std::cout.tie(nullptr);
        1:    6-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:    7:
        1:    8:    int n, x, max_num = -30001, max_ind, sum = -30001, max_sum = -30001, start = -1, end, delta, max_start, max_end;
        1:    9:    std::cin>>n;
        1:    9-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   10:    int *arr = new int [n];
        1:   10-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   10-block  1
    %%%%%:   10-block  2
call    2 never executed
        1:   10-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
       11:   11:    for (int i=0; i<n; ++i){
        1:   11-block  0
       11:   11-block  1
branch  0 taken 10 (fallthrough)
branch  1 taken 1
       10:   12:        std::cin>>x;
       10:   12-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:   13:        arr[i] = x;
       10:   13-block  0
        -:   14:    }
        -:   15:
       11:   16:    for (int i=0; i<n; ++i){
        1:   16-block  0
       11:   16-block  1
branch  0 taken 10 (fallthrough)
branch  1 taken 1
       10:   16-block  2
       10:   17:        if (arr[i] > max_num){
       10:   17-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 8
        2:   18:            max_num = arr[i];
        2:   19:            max_ind = i;
        2:   19-block  0
        -:   20:        }
        -:   21:
       10:   22:        if ((sum + arr[i]) > sum){
       10:   22-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 6
        4:   23:            if (start == -1){
        4:   23-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:   24:                start = i;
        1:   24-block  0
        -:   25:            }
        4:   26:            delta = arr[i];
       15:   27:            for (int j=i; j>start; --j){
        4:   27-block  0
       15:   27-block  1
branch  0 taken 11 (fallthrough)
branch  1 taken 4
       11:   28:                delta += arr[j];
       11:   28-block  0
        -:   29:            }
        4:   30:            if (delta > 0) {
        4:   30-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   31:                sum += delta;
        4:   32:                end = i;
        4:   32-block  0
        -:   33:            }
        -:   34:            else{
    #####:   35:                if (sum > max_sum){
    %%%%%:   35-block  0
branch  0 never executed
branch  1 never executed
    #####:   36:                    max_sum = sum;
    #####:   37:                    max_start = start;
    #####:   38:                    max_end = end;
    #####:   39:                    sum = arr[i];
    #####:   40:                    start = i;
    %%%%%:   40-block  0
        -:   41:                }
        -:   42:            }
        -:   43:        }
        -:   44:    }
        1:   45:    if (start == -1){
        1:   45-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   46:        max_start = max_ind;
    #####:   47:        max_end = max_ind;
    %%%%%:   47-block  0
        -:   48:    }
        1:   49:    std::cout<<max_start<<" "<<max_end;
        1:   49-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   49-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   49-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   50:}
        1:   50-block  0
        1:   50-block  1
